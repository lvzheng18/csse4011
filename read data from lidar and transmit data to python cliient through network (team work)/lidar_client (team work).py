####################################################################################
#
#	Lidar project
#	created by: Jack Roche
#				Guobin Liu
#				Luke Zhang
#				Lu Zheng
#
#
####################################################################################

import serial
import time
import threading
import json
import socket
import math
import numpy as np
import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.axes3d as p3
import matplotlib.animation as animation
from mpl_toolkits.mplot3d import Axes3D
from numpy.linalg import inv
import random

################################ Threhold Value ##########################################

GROUND = 0
OBJECT = 1
DISTANCE_THREHOLD = 1.0
LENGTH_THREHOLD = 1.2
WIDTH_THREHOLD = 1.2
HEIGHT_LOW_THREHOLD = 0.8
HEIGHT_HIGH_THREHOLD = 2.0

TRACKING_DISTANCE_THREHOLD = 0.8
TRACKING_HEIGHT_THREHOLD = 0.5
MAXIMUM_NUMBER_OF_PEOPLE = 20


################################ Kalman Filter constant #################################

dim = 2
n = 2 * dim
cQ = 1e-4
cR = 1e-4
filter_A = np.matrix('1,0,1,0; 0,1,0,1; 0,0,1,0; 0,0,0,1')
filter_B = 0
filter_u = 0
filter_P = np.asmatrix(np.eye(n))
filter_K = np.asmatrix(np.zeros((n,n)))
filter_H = np.matrix('1,0,0,0; 0,1,0,0')
filter_Q = np.asmatrix(np.eye(n) * cQ)
filter_R = np.asmatrix(np.eye(dim) * cR)
filter_x = np.asmatrix(np.zeros((n, 1)))


######################################### Test Data ####################################
xs = [0.7441973119466248, 0.7458069560149018, 0.7240195128205262, 0.7214105312914996, 0.7188782349897656, 0.7189982626366267, 0.7206076270701005, 0.7210021405500399, 0.7220647778116346, 0.7220087240639951, 0.7282759323212576, 0.7199022965070034, 0.7186163439638538, 0.7317218705082207, 0.7297191952211953, 0.7349516067342171, 0.7353726061515098, 0.7280544300431978, 0.7318398724922235, 0.727529141385056, 0.7310894765002742, 0.7434768759889178, 0.7548947412202757, 0.7492571375306591, 0.7430273481818604, 0.7366732579400256, 0.7307098030750474, 0.7396119018571632, 0.7415282771603474, 0.7246184275412392, 0.7063253842072332, 0.6970351390865798, 0.6737310405285701, 0.6645637578224689, 0.6576332101681264, 0.6576976277233082, 0.6597320851061774, 0.7639005669910792, 0.7744843336733049, -0.8102458626899995, -0.8046226258577809, -0.77319060273047, -0.7914996168902081, -0.7187888165191222, -0.6495677758500724, -0.3231413566906785, -0.3322475787783726, -0.2932616394995226, -0.2788749424647471, -0.2775859878882556, -0.27574053656673514, -0.2835934390603565, -0.29267988225800634, -0.30159009947243987, -0.34176143692680944, -0.3418766451900614, -0.332707912368653, -0.3341195820914497, -0.33100387987051727, -0.33102910328375423, -0.3204633759564236, -0.3273884120355063, -0.3222181504117906, -0.31832789634560227, -0.34424258761020926, -0.3073414457369824, -0.3006584542593575, -0.3076086388495035, -0.29987490172680326, -0.29901012995552284, -0.296763137795643, -0.33130599643023145, -0.3306259452346705, -0.34241014555187776, -0.4161417403298298, -0.40935621852849435, -0.4024611838376816, -0.39972563834314867, -0.3832629470948068, -0.3792591139871648, -0.3776614823258512, -0.3705099515935433, -0.37258482613684485, -0.3653444530035063, -0.36687096544957803, -0.362750391481545, -0.36215556192222387, -0.3598536654507522, -0.35354974007463946, -0.3512886977598074, -0.35104173317934584, -0.3532582493886614, -0.3434439371587164, -0.34052965589918316, -0.3424419834893625, -0.345759731606716, -0.3501068163182594, -0.348102615587146, -0.3459155801046782, -0.3451761041138338, -0.35511985133452656, -0.3287931176397125, -0.32855733167007334, -0.3310826991464512, -0.3272465355431637, -0.32912006809895733, -0.33290489320366723, -0.3286551016732791, -0.37047256384353716, -0.37985713075523, -0.3928088366213977, -0.3688877225077581, -0.3638740121448345, -0.3436491667070334, -0.34057861597429934, 0.3657403829269646, 0.36263641792676293, -0.35626576559998707, -0.34706647351994496, -0.3511630090160679, -0.3971457256565478, -0.3975001777597965, -0.3865956815405713, -0.390998536323251, -0.3788192615294525, -0.387592478990345, -0.38184872064292286, -0.37597769815526905, -0.37305779132434774, -0.3717794413085917, -0.37206414534582244, -0.3633446859831706, -0.36317769271037476, -0.36268656136829963, -0.39674528787668745, -0.3910618692934631, -0.3892388171271725, -0.3768185823352801, -0.3735769644595495, -0.37489366094830223, -0.3680217359804278, -0.3660207850226847, -0.37094742369334166, -0.3688744054166581, -0.3678799959019263, -0.37387672110850806, -0.37052423756190234, -0.3698524327494637, -0.3707284303120609, -0.3584733219633136, -0.3500613827429059, -0.3519278155061369, -0.3606973793625185, -0.3564556849643673, -0.35968584693448913, -0.3521767788111562, -0.35538460059943533, -0.39635283813231653, -0.40314335215031, -0.41266477498189447, -0.4221676204292561, -0.40155002442524845, -0.3908392196674973, -0.38190557596455155, -0.37266160929758485, -0.35826294739135073, 0.4034569431892435, 0.4003656736553122, -0.3777707279514892, -0.35482721801810246, -0.3602175297086271, -0.3628729169924499, -0.36539960216855333, -0.36775620220340605, -0.4324810013494468, -0.4179892946310324, -0.4173790897362173, -0.41559535023121214, -0.42006795729193364, -0.40787579259187207, -0.40751267032554117, -0.40792060285998816, -0.4061408618543099, -0.39987476209203365, -0.3896377735006068, -0.3933118760358012, -0.3739541047039495, -0.36442071099508944, -0.36815646924022166, -0.3676938928393097, -0.3641762853240393, -0.36213375806446946, -0.36019217424968764, -0.36102555720934143, -0.3659194730461345, -0.3656375172222068, -0.36328339815178184, -0.36699450702185804, -0.3647260808870549, -0.36514980941659364, -0.34705032660186935, -0.3448538844944577, -0.3396201637233833, -0.34096188983544296, -0.35674131577735546, -0.35010068688540413, -0.345697325921804, -0.3410721420715562, -0.4032174524344614, -0.3941886811580266, -0.40986711288481986, -0.4178396082608842, -0.43481950434427485, -3.85402443606874, -0.4332795301832136, -0.4238238151493619, -0.40268774639982285, -0.4096779772942299, 0.4477913626222356, -0.3902572136179933, -0.39315443536400224, -0.37676474078993427, -0.37416175327959433, -0.37633454770572594, -0.3793058286049902, -0.3753205349187283, -0.38112844607986107, -0.3831625966014594, -0.38856666894601105, -0.38708542785694827, -0.3925060645227505, -0.39645920363844, -0.39772406936475035, -0.4024197749596083, -0.39989556584162256, -0.4037611897558672, -0.40418675734681897, -0.40602174237656635, -0.408726462807847, -0.4135519280219119, -0.4243292019383914, -0.41216637522778143, -0.39677196279767296, -0.3972371858900897, -0.3958644661857206, -0.3936440157621927, -0.39568737451738567, -0.3931436660349824, -0.39197572093170413, -0.39029934677952804, -0.3896990152846114, -0.3946488057429314, -0.39447318161704886, -0.391120745706882, -0.39729291801470756, -0.393657737475807, -0.37471085953621874, -0.3681264813873452, -0.3685032811999617, -0.37359927392717446, -0.37373729770867986, -0.36895816110695023, -0.36392255995471834, -0.3652196361964405, -0.4212679393486113, -0.4213102148073914, -0.4452029843406546, -0.4484457386679794, -0.46070681130804797, -0.4012175884653767, -0.4043300430949492, -0.40382299372953306, -0.4064717366309496, -0.4093076064946214, -0.40538123933742376, -0.40779169160680895, -0.40837530697181645, -0.4087899824201463, -0.4122578855865444, -0.4137298530203658, -0.41159835218790924, -0.41647869146720085, -0.41877520876637775, -0.4200762535798391, -0.4224520441215188, -0.4228567485031006, -0.42466416982258043, -0.42637901493304486, -0.4243241012142287, -0.4271745404553153, -0.4256549430940818, -0.4218615995043479, -0.4300835455615775, -0.4266057103604536, -0.4218762051238774, -0.4231492706948034, -0.4283481428115025, -0.4337028573114584, -0.4331775451031723, -0.43174899339594386, -0.42823611566212666, -0.4254226927540288, -0.424473286635644, -0.42535851834764526, -0.43251288203151955, -0.43234266020081585, -0.4199221979627471, -0.40736911810268933, -0.40888372911739357, -0.3930571192026541, -0.3884311387004054, -0.38315557932978817, -0.37883290493234273, -0.38426002743899595, -0.4447429718680531, -0.456456437748921, -0.4419658822675375, -0.44605858688037764, -0.44486292890392853, -0.4438524154100655, -0.44608084687081645, -0.4474825011882305, -0.44538711808890413, -0.4449886684352725, -0.4462789752468002, -0.4471395965543643, -0.449936688709789, -0.4524350483646589, -0.4543595905032273, -0.454306455235, -0.4563472014646662, -0.45294162701464646, -0.4515107190338077, -0.45612179762907074, -0.4593069803082648, -0.4624334136498666, -0.45866132810238597, -0.4570690574787787, -0.4566639496249481, -0.4568832337497237, -0.45785638169879084, -0.46430980130986305, -0.46995201906791173, -0.4702530169619211, -0.47026108540711403, -0.46895538898725686, -0.4670380862954025, -0.4681531583943176, -0.47839512368482734, -0.45335255465967994, -0.44739175534580716, -0.4305568567849511, -0.41875046812119227, -0.41043518155275466, -0.40586401480969286, -0.40103374078497933, -0.4033962901863291, -0.49087951127891344, -0.48140404901786116, -0.49569194987330506, -0.48374309881761346, -0.4837496348283085, -0.47914620605454344, -0.47954533234995655, -0.4808674801961587, -0.4819202493264841, -0.48291100797520115, -0.48766624051056634, -0.48691979991237544, -0.4869247431261393, -0.48902651620468646, -0.4826161213408426, -0.48524994611065225, -0.49116921308276823, -0.4945616612065355, -0.49890136228187326, -0.49455323919443256, -0.49081249056542575, -0.489490900384258, -0.49600274459071225, -0.4981806047258391, -0.49914584059216865, -0.4998508686394396, -0.5005269097098687, -0.5031284030433735, -0.5059098673724508, -0.5117200050633965, -0.515675324833738, -0.5228290284535622, -0.506432228036941, -0.49130865105649646, -0.4712010528715033, -0.44755323260565244, -0.43640731920547393, -0.42554167292474904, -0.42152610514716604, -0.42632082503989366, -0.43234376591955104, -0.4875139343371663, -0.5158345705056444, 1.3508267056237704, -0.5715096838804407, -0.5594232185905992, -0.5530504183164162, -0.5320322197036155, -0.5349315495500406, -0.5415691530964106, -0.544415501056566, -0.5406908521218349, -0.5458055548676044, -0.5341431858197978, -0.5288334629146979, -0.5276821872909979, -0.5326901010260479, -0.5387758037187509, -0.5421907702169616, -0.543604169654259, -0.5749468054320872, -0.5755706246553549, -0.5491486328178412, -0.5635519466689065, -0.5611970106682956, -0.551494318108468, -0.5001917473524629, -0.4743453364307005, -0.4609550154125802, -0.45542179362217444, -0.45582361410935046, -0.44747719651831896, -0.46003368154659197, -0.49012554882449433, -0.5170110878708007, 1.4018889667773784, 1.4256326178220509, -0.5870948190512911, -0.5790353905275711, -0.5800270128018336, -0.5786774323484453, -0.5935885750778991, -0.6224931090885326, -0.6341947827420529, -0.6305949696374179, -0.6266265292900379, -0.6251803172710216, -0.5032876999461525, -0.48958613802401, -0.4811719742758893, -0.4814238550168594, -0.4850107650210864, -0.4892776627308565, -0.5450898345313896, -0.5617546854794669, 1.5003974481834574, -0.5626323771387525, -0.5486971106736113, -0.5377431078465068, -0.5250276603734906, -0.562348721715635, 1.578996560040182]
ys = [0.03900172846753127, 0.0390860863385858, 0.037944254824513156, 0.0378075238963864, 0.03767481187072587, 0.037681102253150425, 0.037765445469165895, 0.03778612104454675, 0.03784181150361034, 0.037838873851176055, 0.038167324318243524, 0.03772848066069352, 0.03766108674364367, 0.03834791828616889, 0.03824296252175086, 0.038517181589443346, 0.03853924523398312, 0.038155715875744275, 0.03835410250810147, 0.03812818666368849, 0.03831477592058052, 0.0389639720188722, 0.03956235697980072, 0.039266902689950034, 0.03894041326477836, 0.03860740950583975, 0.03829487807951159, 0.038761417307640544, 0.0388618502815533, 0.037975642615005654, 0.037016944837541955, 0.0365300637217734, 0.03530874766815499, 0.0348283107394684, 0.03446509612768901, 0.03446847210870294, 0.034575093502185114, 0.040034332309058514, 0.0405890040173238, -0.0424631863368548, -0.042168484982095626, -0.04052120245162007, -1.3709175506251414, -1.4107024825400432, -1.4589531117024337, 0.994526833667378, 1.0225529034725358, 0.7639726901543821, 0.7264940630320257, 0.7231362215599207, 0.7183286565028031, 0.7387861669150427, 0.7624571607262016, 0.7856690701555689, 0.7676087552399602, 0.7678675172358816, 0.747274206148896, 0.7504448682589046, 0.7434468864941551, 0.7435035392078488, 0.7197725270876194, 0.7353264127818527, 0.7237138150442814, 0.714976161351792, 0.7731815109164738, 0.6903001892701496, 0.6752899446517155, 0.6909003148266059, 0.6735300568493129, 0.6715877476499827, 0.6665409206282182, 0.7441254513972787, 0.7425980314039112, 0.7690657786674123, 0.8167241513505206, 0.8034068149778854, 0.7898745474578737, 0.7845057371320162, 0.7521958863391327, 0.744337921419785, 0.7412023927373635, 0.727166723391693, 0.7312388939679819, 0.7170288615927144, 0.7200248109561591, 0.7119377291977863, 0.7107703104556776, 0.7062525842581822, 0.6938804340891029, 0.6894428886886217, 0.6889581934085202, 0.6933083514065452, 0.6740466791197475, 0.6683270801037909, 0.6720802343222442, 0.6785916816319821, 0.6871233157551782, 0.6831898503451538, 0.67889755153135, 0.6774462481831499, 0.6969619509425692, 0.6452928268174907, 0.6448300707964261, 0.6497863835358264, 0.6422574885471778, 0.6459345032235845, 0.6533626407355877, 0.645021955231841, 0.7270933458007537, 0.7455115954112581, 0.7709307494084116, 0.723982919545595, 0.7141429589157611, 0.6744494647873146, 0.6684231696615642, -0.7178059178199373, -0.7117140435018212, 0.6992109343183701, 0.6811563070388692, 0.6891962106397349, 0.7794423733900072, 0.7801380248115415, 0.758736745974449, 0.7673778350251498, 0.7434746623654066, 0.7606930711212355, 0.749420310647502, 0.7378977802351756, 0.7321671404137132, 0.7296582372430777, 0.7302170003775065, 0.7131040978300408, 0.7127763550785029, 0.7118124555469635, 0.6871829962659636, 0.6773390265191379, 0.6741814075422742, 0.6526689298407817, 0.6470542829812929, 0.6493348681979602, 0.6374323450078005, 0.633966596285536, 0.6424997847736473, 0.6389092117934126, 0.6371868439903673, 0.6475734767271957, 0.6417668048929358, 0.640603204825023, 0.6421204771107477, 0.6208940067984559, 0.6063241006785285, 0.6095568570533556, 0.6247461872128283, 0.6173993570050502, 0.6229941616539779, 0.6099880741468694, 0.6155441844657953, 0.6865032533692959, 0.6982647686579692, 0.7147563567626198, 0.7312157678939247, 0.6955050440850544, 0.6769533860546789, 0.6614798612644591, 0.6454688413337997, 0.6205296273511957, -0.6988079242702003, -0.6934536883775415, 0.6543180944242599, 0.6145787695156729, 0.623915063232294, 0.6285143289216475, 0.6328906760213897, 0.6369724270148731, 0.7490790676455065, 0.7239786953208255, 0.7229217894399785, 0.7198322619898418, 0.7275790446613027, 0.7064615959465484, 0.7058326497319037, 0.7065392096076262, 0.7034566077614778, 0.6926034046079201, 0.6748724202510658, 0.6812361525142401, 0.6477075090461726, 0.6311951867738695, 0.637665709859233, 0.636864504030471, 0.6307718290929365, 0.6272340681035172, 0.6238711462891616, 0.6253146079174442, 0.6337911187947357, 0.633302756982203, 0.6292253031451602, 0.6356531322605518, 0.6317241029418554, 0.6324580222836331, 0.6011087984578108, 0.5973044491318903, 0.5882393788437608, 0.5905633166396899, 0.6178940840853528, 0.6063921774502833, 0.5987653325372625, 0.5907542791142862, 0.6983931141149746, 0.6827548235342711, 0.7099106638680769, 0.7237194309225282, 0.7531294736462006, 5.934677198787509, 0.6671919680671736, 0.6526314437787306, 0.6200847520385392, 0.6308487636818109, -0.6895382304007717, 0.6009434101262513, 0.6054047403853322, 0.5801668239431028, 0.5761585746746835, 0.579504384685055, 0.5840797560394835, 0.5779429419214974, 0.5868863408314735, 0.590018657950808, 0.5983401996161024, 0.596059288360092, 0.6044063368433296, 0.6104936372646647, 0.6124413596805399, 0.6196721122064498, 0.6157851710243223, 0.6217377098531515, 0.6223930264761931, 0.6252186556326252, 0.6293835598616679, 0.6368141246789123, 0.6534096711883319, 0.6346805604757155, 0.6109752441360798, 0.6116916248764498, 0.6095778218985538, 0.606158628087476, 0.6093051246431013, 0.6053881570728906, 0.6035896793286937, 0.6010082895055133, 0.6000838600698168, 0.6077058689748074, 0.6074354315365602, 0.6022731329350605, 0.6117774448225077, 0.6061797576735143, 0.5770041241606707, 0.566865070940714, 0.567445291770534, 0.575292432427023, 0.5755049704123363, 0.568145745402049, 0.5603915996159827, 0.562388921876007, 0.6486957401812932, 0.648760838679098, 0.6855524773718664, 0.690545881146772, 0.7094262773239992, 0.5522286349387883, 0.5565125612192185, 0.5558146676398735, 0.5594603494813596, 0.5633635894905265, 0.5579594087222278, 0.5612771116459684, 0.5620803892828738, 0.5626511410728184, 0.5674243002929935, 0.5694502896564275, 0.5665165304471651, 0.5732337411969475, 0.5763946260875837, 0.5781853606465547, 0.5814553557949491, 0.5820123835888938, 0.5845000856157, 0.5868603674221516, 0.5840320213314448, 0.587955314368278, 0.5858637680338805, 0.5806426784988354, 0.5919592164030957, 0.5871723869098904, 0.5806627814094931, 0.5824150058448901, 0.5895706394331565, 0.5969407716601806, 0.5962177414340929, 0.5942515086918053, 0.5894164472901536, 0.5855441028648083, 0.5842373574482786, 0.5854557743721049, 0.5953029111990652, 0.595068620948815, 0.5779733212804423, 0.560695489114828, 0.5627801723320133, 0.5409967125830162, 0.5346295966552689, 0.5273684121171791, 0.5214187612284515, 0.5288885545267913, 0.6121361857358082, 0.6282583884002907, 0.5457824112976878, 0.5508364805866218, 0.5493599659513164, 0.5481120857111046, 0.5508639693855192, 0.5525948683165389, 0.5500072856853292, 0.5495152413410371, 0.5511086375536505, 0.5521714163592149, 0.5556255375085153, 0.5587107547423161, 0.5610873663568661, 0.5610217497652206, 0.5635418614814448, 0.5593363272767471, 0.5575693030799459, 0.563263510925796, 0.5671968839593774, 0.5710577076030179, 0.566399569886227, 0.5644332794207001, 0.5639330128839146, 0.5642038062260734, 0.5654055438612642, 0.5733748533889048, 0.5803424120548708, 0.580714113498306, 0.5807240771983323, 0.5791116764021529, 0.5767440047597648, 0.5781210041240467, 0.5907687779386278, 0.5598437806571406, 0.552482806533763, 0.5316934381704058, 0.5171137623805824, 0.5068452386414446, 0.50120031782839, 0.4952354261699861, 0.4981529317078866, 0.6061857126796463, 0.5944844912766176, 0.5505216830293775, 0.5372511395090964, 0.5372583984843714, 0.5321457728771031, 0.5325890475357863, 0.5340574414802329, 0.5352266600515981, 0.5363270090060386, 0.5416082297707381, 0.5407792235008106, 0.5407847134958803, 0.5431189689802459, 0.5359995042194641, 0.5389246629706819, 0.5454986749485289, 0.5492663702906937, 0.5540860966155815, 0.549257016698652, 0.5451024944564471, 0.5436347198617667, 0.5508668555320728, 0.5532856142536922, 0.5543576172865998, 0.5551406302592046, 0.5558914499325616, 0.5587807009859967, 0.561869830079421, 0.5683226417118662, 0.5727154693489587, 0.5806604621165143, 0.5624499703706584, 0.545653536507194, 0.5233217863197838, 0.49705822118409837, 0.48467943027265775, 0.47261190753157734, 0.46815216770364887, 0.47347724362161264, 0.4801663971386365, 0.5414390766284742, 0.5728923295851103, -1.5002450446312492, 0.5715096838804408, 0.5594232185905993, 0.5530504183164162, 0.5320322197036156, 0.5349315495500406, 0.5415691530964106, 0.5444155010565661, 0.540690852121835, 0.5458055548676044, 0.5341431858197979, 0.528833462914698, 0.527682187290998, 0.532690101026048, 0.538775803718751, 0.5421907702169617, 0.543604169654259, 0.5749468054320873, 0.575570624655355, 0.5491486328178413, 0.5635519466689067, 0.5611970106682957, 0.551494318108468, 0.500191747352463, 0.4743453364307006, 0.46095501541258027, 0.4554217936221745, 0.4558236141093505, 0.447477196518319, 0.4600336815465921, 0.4901255488244944, 0.5170110878708009, -1.4018889667773786, -1.425632617822051, 0.5286225494600912, 0.5213658074226044, 0.5222586681287662, 0.5210435004304299, 0.5344695536491326, 0.5604953129708515, 0.5710315472535347, 0.5677902609754049, 0.5642170612370693, 0.5629148860862349, 0.4531622804768737, 0.4408253387089794, 0.43324919164078723, 0.43347598607863735, 0.4367056543529757, 0.44054758630745794, 0.49080109151770374, 0.5058061907089733, -1.3509639303985446, 0.4556107155655132, 0.44432615928372404, 0.435455782694762, 0.42515901635618353, 0.45538101593294356, -1.2786462027903807]
zs = [-0.15903844210744447, -0.14221225233614415, -0.11766999864426078, -0.10152677715036806, -0.08400746579027844, -0.06595932730478604, -0.048877207744655794, -0.033101131078370746, -0.01676354514892242, 0.0007886704993368608, 0.018101705886157123, 0.03521800293852706, 0.05229189930870611, 0.0693436470274532, 0.08588034957597021, 0.10384182674239936, 0.12095833662353046, 0.13800321822509742, 0.15472673929015696, 0.1717551740625656, 0.1906106117106561, 0.21348113208026587, 0.2329157564188729, 0.2528634309513748, 0.26920357829828434, 0.28686970730154987, 0.30308527843315114, 0.3261247455492037, 0.3484761588176456, 0.3605427124983101, 0.37434510804790655, 0.39039420054995116, 0.3974025381982313, 0.41306484122945375, 0.4304721599974544, 0.45237899477940413, 0.47641199480152735, 0.573818123177785, 0.6096792596501037, -0.2396132713349993, -0.2579151969776972, -0.26777768111096817, -0.24762570212039056, -0.2458987708436105, -0.25339005985037216, -0.4755235043734929, -0.4595026316527429, 0.3376550043999473, 0.3444359778601866, 0.3637692770096759, 0.3841498376164784, 0.4406277605835778, 0.4798751161279138, 0.5204591954237022, 0.07674621559843542, 0.09599914295238193, 0.11291487223492769, 0.133553985589762, 0.1526668217813253, 0.17276058568017302, 0.18688444670574922, 0.20957088736330234, 0.22669313500689936, 0.2430158206924804, 0.30387160866449175, 0.3158922038067689, 0.3293532253290634, 0.35744360433172206, 0.3690969463906487, 0.389598305168804, 0.4091296752544008, 0.47860862070398164, 0.5036354937777086, 0.5480085494824222, -0.2277453897580204, -0.17884501250843293, -0.15531643435963643, -0.13158732825813577, -0.1052920911497624, -0.08296886882526805, -0.06295935409331924, -0.04299412357449816, -0.02261033571311548, -0.003950291460736423, 0.015428182577411804, 0.03401302286897335, 0.053377567793389404, 0.07021886634158403, 0.08829828413663023, 0.1059516590852053, 0.12484739405253534, 0.14355731123421284, 0.15885948632851515, 0.17511005097687815, 0.1946346489637145, 0.21456956941544697, 0.23692262157316737, 0.2556252333138379, 0.27262811385765406, 0.29280983670527516, 0.32225755247390475, 0.3205561627088928, 0.34035910756510923, 0.36385010938205375, 0.37924302680480326, 0.4026216099762143, 0.4308617432217373, 0.44688708183725734, 0.5543172340198904, 0.5968174627319184, 0.6759962999075728, 0.8063641503001456, 0.8340660045923598, 0.8640889607960898, 0.8975141977153445, -0.2590901370934731, -0.2787004640748446, -0.316061344664429, -0.2874917578637674, -0.2691730379116959, -0.2622411517227734, -0.24050420146865822, -0.2118220463556279, -0.19364649597963113, -0.16715978438286153, -0.14957835497912766, -0.1278135948651969, -0.10466708610573752, -0.08387587752509795, -0.06512414178778703, -0.04451928354948461, -0.025763294156506807, -0.00719938598580061, 0.013508750165753827, 0.048966378164789034, 0.06713760152708056, 0.08633154386293392, 0.10193759869311446, 0.11854643183475981, 0.1372735751086757, 0.15163198008272719, 0.16879485248522816, 0.18863267325967017, 0.20611329921678323, 0.22450567244680944, 0.24702437056412707, 0.2642398910397206, 0.2830206917474642, 0.3023942564491282, 0.3147642129632046, 0.32647260719469035, 0.3475805671960293, 0.3765350774948399, 0.39339603598197875, 0.4189995418375498, 0.4324214562955812, 0.4588280098545848, 0.5343722586529265, 0.5688385649444347, 0.6124550566829938, 0.655228634557738, 0.7542435773915007, 0.7710919643458921, 0.7887943484766712, 0.8062861153603827, 0.8927727620205763, -0.25417706420833003, -0.27302986912444516, -0.3160982575276352, -0.25697887834243377, -0.24280318709287363, -0.2264355249371481, -0.20955329975987344, -0.19235790980281942, -0.18607336291666954, -0.15918793388761418, -0.13898864811151346, -0.11959131224626633, -0.09943663824933067, -0.07563011153111, -0.0567687774801134, -0.03851869090941251, -0.01883218863947386, 0.0008723917452899785, 0.018704861559466927, 0.03713923365921297, 0.07078045493121497, 0.08686876073326584, 0.10491577158032202, 0.12388650925220461, 0.14034099661301866, 0.15539346054585632, 0.17357243570662426, 0.1924181661557392, 0.21136418684951433, 0.22969343481763072, 0.2472992933859199, 0.26760360566168195, 0.2845848620061816, 0.3064742513362269, 0.31016825389156555, 0.3280506910468754, 0.34259763582081093, 0.36401780000347866, 0.40110445580891296, 0.4165760418812782, 0.4315071672661481, 0.44963115507144324, 0.5785490421814309, 0.5934110692324355, 0.6473144901065083, 0.6896466465325288, 0.7505694885000297, 13.494439216020673, 0.7951014331334493, 0.8124472735528928, 0.8117521045175894, 0.8629289395896045, -0.2614526474845757, -0.31692045539054753, -0.2987745852186579, -0.26836316158009915, -0.24538648946422706, -0.2307796055415695, -0.2137526069341359, -0.19435136210339318, -0.17975477889111557, -0.1634303225706747, -0.14859849194242775, -0.1313231084023825, -0.11474768754310573, -0.0998758289564296, -0.08340351072104096, -0.06525228406006464, -0.0471192324508232, -0.03135477305746287, -0.013965968611899334, 0.00426935199180441, 0.02108496327812595, 0.037717846423013325, 0.05789725796515565, 0.07266035910882442, 0.08965077016144235, 0.10758037321989102, 0.12346564688572104, 0.14028602549692362, 0.15919431281045504, 0.17392379691250812, 0.1934737597400629, 0.2090877945962675, 0.22646034613130986, 0.24685248011565986, 0.2672023680638246, 0.28401003172824646, 0.30588837065472513, 0.32440676566975, 0.3293107574119093, 0.3425375126154094, 0.3628377531243345, 0.3888373049403662, 0.4097743572163949, 0.42459455641132277, 0.4399109289797704, 0.4662766135972103, 0.557146948701704, 0.5868969901910753, 0.6775877552047939, 0.7161489845009616, 0.7713080795353975, -0.28121352022914914, -0.26384000446494443, -0.24603273658538685, -0.22991608725449142, -0.21144458328837318, -0.19329100214856385, -0.1770026559089336, -0.1602006386981266, -0.14287912276603573, -0.12682926203648057, -0.11049989289568216, -0.09374469161666642, -0.07720841927613341, -0.06017939464659848, -0.04351585817078762, -0.027649631732073653, -0.011576078548446323, 0.005122771138541337, 0.022558973244886833, 0.03980772774529624, 0.05719668078559897, 0.0721219607658948, 0.08931647815118468, 0.10711059682690278, 0.12369405175025437, 0.13992056437874767, 0.15898118812347772, 0.17832384071771137, 0.19814021976778173, 0.21611482877770852, 0.23512659062535332, 0.2499742854904623, 0.26858450456077687, 0.2860589128039655, 0.30740970970913517, 0.33074554160971953, 0.3515760558294, 0.36278609406396767, 0.3728806378756089, 0.39407210468771237, 0.4005607419836346, 0.4167061403052885, 0.4319703229730713, 0.450766409107322, 0.47824797773032285, 0.5756896226151625, 0.6180575764783043, -0.20907003833538362, -0.1926166107199087, -0.17297590814037275, -0.15676231955439246, -0.13858509222800633, -0.1237795828905248, -0.1051786610178954, -0.0876032790374015, -0.07160243268510565, -0.05318983125616168, -0.03864244067400326, -0.02157271532608474, -0.004725445212428245, 0.012010038392083752, 0.02967936275251919, 0.046779461368047386, 0.06336091350759912, 0.08057720203116338, 0.09689610501395839, 0.11494561769514147, 0.1324079900763259, 0.1494161965044451, 0.1664867685211455, 0.18522240215051466, 0.2017649739390839, 0.22468700097880054, 0.2444398638608847, 0.26323616947921086, 0.28357471716263505, 0.3032008565200617, 0.3226876840277555, 0.3431898707363448, 0.371276657827393, 0.37251496942144685, 0.38976778757764735, 0.39699355269575354, 0.40651133404233764, 0.4205078665260073, 0.4378274693201403, 0.4545452385827381, 0.4786596804565273, 0.6039523467539842, 0.622912980456171, -0.16975089792193238, -0.14831664587129145, -0.1311383489353385, -0.11181391743681778, -0.09355609636091929, -0.07691994662884566, -0.06043887953222206, -0.04335086835360773, -0.025450457970298723, -0.009327506802603809, 0.008732163576220277, 0.024523753435030635, 0.04233746447780946, 0.0578700910794685, 0.07634133709238708, 0.09546088325758621, 0.11392581248601891, 0.1303229573390312, 0.14652770946931115, 0.16427115480761312, 0.18395936326995488, 0.20319738343520008, 0.22096393817965182, 0.2420445253580647, 0.2609934310440848, 0.2811289753060375, 0.3042737256841476, 0.3283170325090723, 0.3501973736709355, 0.37688126079833184, 0.38797767878524325, 0.3981464429003961, 0.4052901747339273, 0.40612249228223085, 0.4172500019346477, 0.42921420289148143, 0.4462435327865661, 0.4754943258439416, 0.5036761475684566, 0.5919674422016826, 0.6537007243944304, -0.05396542812777605, 0.004628710593394921, 0.023739734696692445, 0.04184533546375377, 0.05942219193607301, 0.07534279721370185, 0.09488818329419603, 0.11356314066921694, 0.13074734170730984, 0.1509133610762575, 0.16638618958481363, 0.18322209747543425, 0.20061301286700248, 0.2215853673817785, 0.24298421585450336, 0.2626187110300325, 0.28456822726546144, 0.32054382203822807, 0.34159109263516957, 0.3485658053346478, 0.3801412984817246, 0.4022075247107364, 0.4182499661543941, 0.4017445478920403, 0.4043186442805861, 0.41355162619916735, 0.43060369516287594, 0.4505906297744993, 0.46533704687270644, 0.5011881744269088, 0.5578610537391693, 0.6159018347409774, -0.051915432731589474, -0.09739367537828882, 0.17423797991667916, 0.19314055469310112, 0.21187522385722418, 0.23019578612523509, 0.25592276619926985, 0.286382429235802, 0.31377621338143935, 0.33558971052382636, 0.35656493181316395, 0.3773067742824476, 0.40868868180549217, 0.4194513490344839, 0.4349352470357483, 0.4551897448469802, 0.48100757974256475, 0.5094913570918579, 0.590664391474188, 0.6385154820224352, -0.055623904453793394, 0.4376981654714555, 0.4495272460203112, 0.46288968586616014, 0.4752491627070805, 0.5317857139042674, -0.05375873390447797]

cloudList = []
for i, val in enumerate(xs):
	cloud = []
	cloud.append(xs[i])
	cloud.append(ys[i])
	cloud.append(zs[i])
	cloudList.append(cloud)

################################# Client Constant ######################################
TCPIP = "192.168.137.1"
TCPPORT = 50001
BUFFERSIZE = 1024

testPoints = []

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((TCPIP, TCPPORT))
sock.send("Hello".encode("utf8"))

#################################### Gui Variable ######################################

persons = []
testPoints = []

prevData = []
personList = []

personId = 0
###################################### Create figure ###################################
# Attaching 3D axis to the figure
fig = plt.figure()
fig.patch.set_facecolor('black')
ax = p3.Axes3D(fig)

# Setting the axes properties
ax.set_xlim3d([-3.0, 3.0])
ax.set_xlabel('X')

ax.set_ylim3d([-3.0, 3.0])
ax.set_ylabel('Y')

ax.set_zlim3d([0, 2.0])
ax.set_zlabel('Z')

ax.set_title('Lidar')
receive_data = []


#######################################################################
# Localization part
#######################################################################

def round_value(value):
	return float("%.2f" % value)


# 2D Cell object with height
class Cell(object):
	def __init__ (self, x, y, z_max, z_min, cell_type = GROUND):
		self.x = round_value(x)
		self.y = round_value(y)
		self.z_max = round_value(z_max)
		self.z_min = round_value(z_min)
		self.cell_type = cell_type

	# Set object type, 0 - ground, 1 - object
	def set_type(self, cell_type):
		self.cell_type = cell_type

	def get_type(self):
		return self.cell_type

	def get_z_max(self):
		return self.z_max

	def append_value(self, value):
		if self.z_min > value:
			self.z_min = value
		if self.z_max < value:
			self.z_max = value

	def get_z_min(self):
		return self.z_min

	def get_x(self):
		return self.x

	def get_y(self):
		return self.y

	def get_height(self):
		if self.z_max > self.z_min:
			return round_value(self.z_max - self.z_min)
		else:
			return 0

	def __str__(self):
		return '(' + str(self.get_x()) + ',' + str(self.get_y()) + ',' + str(self.get_height()) + ')'

# A cluster to distinguish whether a person candidate or not
class Cluster(object):
	def __init__(self, x, y, z, n = 1):
		# width - max x - min x
		# length - max y - min y
		# depth - max z - min z
		# x, y, z - central x, y, z
		# n number of cells inside the cluster
		self.x = x
		self.y = y
		self.z = z
		self.n = n
		self.max_x = x
		self.max_y = y
		self.max_z = z
		self.min_x = x
		self.min_y = y
		self.min_z = z
		self.Vx = 0
		self.Vy = 0
		self.width = 0
		self.length = 0
		self.height = 0
		self.filter = None
		self.cellList = []
		self.cellList.append([x, y, z])
		self.idNumber = 0

	def check_distance(self, x, y):
		return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2)

	def get_2d_central(self):
		return str(self.x) + ';' + str(self.y)

	def round_value(self, value):
		return float("%.2f" % value)

	def set_id(self, pastId):
		self.idNumber = pastId

	def create_new_id(self, personId):
		self.idNumber = personId

	def get_id(self):
		return self.idNumber

	# If a person is identified as new into the map, then init a kalman filter
	# for tracking it.
	def update_filter_value(self, filter_x):
		# Getting all the filtered data from 
		self.x = self.round_value(filter_x[0])
		self.y = self.round_value(filter_x[1])
		self.Vx = self.round_value(filter_x[2])
		self.Vy = self.round_value(filter_x[3])

	def update_max(self, x, y, z):
		if x > self.max_x:
			self.max_x = x
		if y > self.max_y:
			self.max_y = y
		if z > self.max_z:
			self.max_z = z

	def update_min(self, x, y, z):
		if x < self.min_x:
			self.min_x = x
		if y < self.min_y:
			self.min_y = y
		if z < self.min_z:
			self.min_z = z

	def update_center(self, x, y, z):
		self.n += 1
		self.x = ((self.n - 1) * self.x / self.n) + x / self.n
		self.y = ((self.n - 1) * self.y / self.n) + y / self.n
		self.z = ((self.n - 1) * self.z / self.n) + z / self.n
		self.x = self.round_value(self.x)
		self.y = self.round_value(self.y)
		self.z = self.round_value(self.z)


	def update_size(self):
		self.width = self.max_x - self.min_x
		self.length = self.max_y - self.min_y
		self.height = self.max_z - self.min_z
		self.width = self.round_value(self.width)
		self.length = self.round_value(self.length)
		self.height = self.round_value(self.height)

	def append_cell(self, x, y, z):
		self.cellList.append([x, y, z])
		self.update_center(x, y, z)
		self.update_max(x, y, z)
		self.update_min(x, y, z)
		self.update_size()

	def get_width(self):
		return self.width

	def get_length(self):
		return self.length

	def get_height(self):
		return self.height

	def get_central(self):
		return [self.x, self.y, self.z]

	def get_X(self):
		return self.x

	def get_Y(self):
		return self.y

	def get_size(self):
		return [self.width, self.length, self.height]

	# getting all properties of cluster
	def get_value(self):
		return [self.x, self.y, self.width, self.length, self.height, self.Vx, self.Vy, self.idNumber]

	def __str__(self):
		return '(' + str(self.x) + ', ' + str(self.y) + ', ' + str(self.z) + ') ' + str(self.get_size()) + '\n' 


# Grouping different cells into different cluster using the ditance between
# central point position and cell position.
class Localization(object):
	def __init__(self):
		self.clusterList = []
		self.listSize = 0

	# A distance-based cluster algorithm, clustering all point within
	# some ditance of central point into a cluster with mean-shift
	def cluster_cell(self, cell_list):
		for cell in cell_list:
			x = cell.get_x()
			y = cell.get_y()
			z_max = cell.get_z_max()
			z_min = cell.get_z_min()
			clusterFlag = 0
			for cluster in self.clusterList:
				if cluster.check_distance(x, y) <= DISTANCE_THREHOLD:
					cluster.append_cell(x, y, z_max)
					cluster.append_cell(x, y, z_min)
					clusterFlag = 1
					break

			# If not any existing cluster within 1 meter of current cell
			if(clusterFlag == 0):
				newCluster = Cluster(x, y, z_max)
				newCluster.append_cell(x, y, z_min)
				self.listSize += 1
				self.clusterList.append(newCluster)

	# Return a list of cluster which representing person
	def get_person_cluster(self):
		person_cell = []
		for cluster in self.clusterList:
			if (cluster.get_width() < WIDTH_THREHOLD and 
				cluster.get_length() < LENGTH_THREHOLD and
				cluster.get_height() > HEIGHT_LOW_THREHOLD and 
				cluster.get_height() < HEIGHT_HIGH_THREHOLD):

				person_cell.append(cluster)

		return person_cell

	def get_all_cluster(self):
		return self.clusterList

	def __str__(self):
		str = ""
		for cluster in self.clusterList:
			str += cluster.__str__()
			str += "\n"			

		return str

# Mapping the 3D cloud data into 2D cell object.
class Segmentation(object):
	def __init__(self):
		self.cell_matrix = np.empty([100, 100], dtype=object)
		self.cell_list = []
		self.cell_x_coor = []
		self.cell_y_coor = []

	def check_cell(self, coor):
		x = round_value(coor[0])
		y = round_value(coor[1])
		z = round_value(coor[2])

		# if it has repeated cell on coordinate, add value onto cell
		cell_flag = 0
		for cell in self.cell_list:
			if cell.get_x() == x and cell.get_y() == y:
				cell_flag = 1
				cell.append_value(z)
				break

		# if it doesn't have cell for this coor, create one 		
		if cell_flag == 0:
			cell = Cell(x, y, z, z)
			self.cell_list.append(cell)

	def get_object_cell(self):
		objectList = []
		for cell in self.cell_list:
			if cell.get_type() == OBJECT:
				objectList.append(cell)
		return objectList

				
	def mapping_to_2d(self, cloudList):
		for data in cloudList:
			self.check_cell(data)

		for i in self.cell_list:
			if i.get_height() > 0.2:
				i.set_type(OBJECT)
				print(i)

# Filter used for predict person track.
class KalmanFilter(object):
	def __init__(self, A, B, u, P, K, H, Q, R, x):
		# A - state transfer matrix
		# B - control input matrix: control outside effect on inside system
		# u - effect of noise take into the system on time k
		# P - error matrix
		# Q - convariance matrix of predicted noise
		# R - convariance matrix of measurement noise
		# K - Optial Kalman gain at time k
		# x - state estimate at time k
		self.A = A
		self.B = B
		self.u = u
		self.P = P
		self.K = K
		self.H = H
		self.Q = Q
		self.R = R
		self.x = x

	def filter_process(self, z):
		# Predict
		self.predict_x = self.A * self.x + self.B * self.u
		self.P = self.A * self.P * self.A.transpose() + self.Q
		# Correct
		self.K = self.P * self.H.transpose() \
		* inv((self.H * self.P * self.H.transpose() + self.R))
		self.x = self.predict_x + self.K * (z - self.H * self.predict_x)
		self.P = self.P - self.K * self.H * self.P


	# x - state estimate at time k
	def get_x(self):
		# x [Xx, Xy, Vx, Vy] 
		return self.x

# Applying different kalman filter onto 
class Tracking(object):
	def __init__(self):
		self.curPersonList = []
		self.prePersonList = []
		self.filterList = np.zeros(20, dtype=np.object)

	# Update cluster of personlist for kalman filter
	def update_tracking(self, personList):
		global personId
		
		self.prePersonList = self.curPersonList
		self.curPersonList = personList
		newfilterList = np.zeros(20, dtype=np.object)
		n = 0
		for i, curPos in enumerate(self.curPersonList):
			filterFlag = 0
			print("handler new person")
			for j, prePos in enumerate(self.prePersonList):
				distance = curPos.check_distance(prePos.get_X(), prePos.get_Y())
				prevHeight = prePos.get_height()
				currHeight = curPos.get_height()
				heightDiff = abs(prevHeight - currHeight)
				if distance < TRACKING_DISTANCE_THREHOLD and heightDiff < TRACKING_HEIGHT_THREHOLD:
					# Put current pos coor as a measurment value to the preFilter					
					filterFlag = 1
					newfilterList[i] = self.filterList[j]
					filter_z = np.matrix(curPos.get_2d_central())
					newfilterList[i].filter_process(filter_z)
					# update value into current cluster
					curPos.update_filter_value(newfilterList[i].get_x())
					curPos.set_id(prePos.get_id())
					break;
			# If no cluster inside previous cluster list matching current cluster
			# Initialising one for it.
			if filterFlag == 0:
				x = curPos.get_X()
				y = curPos.get_Y()
				Vx = 0
				Vy = 0
				filterX = np.matrix(str(x) + ';' + str(y) + ';' + str(Vx) + ';' + str(Vy))
				kalmanFilter = KalmanFilter(filter_A, filter_B, filter_u, filter_P, 
				filter_K, filter_H, filter_Q, filter_R, filterX)
				newfilterList[i] = kalmanFilter
				curPos.create_new_id(personId)
				personId += 1
				


		self.filterList = newfilterList

def plotPoints(points):

	global testPoints
	if len(points) != 0:
		for i in range(0, len(testPoints)):
		    testPoints.pop(0).remove()
	for point in points:
		p = ax.scatter(point[0], point[1], point[2], c = 'b', s = 2)
		testPoints.append(p)



tracker = Tracking()


def receiveData():

	global personList

	while recThreadRunning:
		recieving = True
		data = ""
		while recieving:
			d, addr = sock.recvfrom(BUFFERSIZE)
			data = data + d.decode("utf8")
			try:
				j = json.loads(data)
				panList = j.get("pan")
				tiltList = j.get("tilt")
				rangeList = j.get("range")
				print("Recived Data")
				# Data Collection
				for i, distance in enumerate(rangeList):
					tilt_rad = math.radians(tiltList[i]);
					pan_rad = math.radians(panList[i]); 
					x = distance * math.cos(tilt_rad) * math.cos(pan_rad)
					y = distance * math.cos(tilt_rad) * math.sin(pan_rad)
					z = distance * math.sin(tilt_rad)
					coor_list = []
					coor_list.append(x/1000)
					coor_list.append(y/1000)
					coor_list.append(z/1000)
					receive_data.append(coor_list)
				# Data Segmentation
				newSegmentation = Segmentation()
				newSegmentation.mapping_to_2d(receive_data)
				objectList = newSegmentation.get_object_cell()
				# Data Localization
				newLocalization = Localization()
				newLocalization.cluster_cell(objectList)
				# Data Tracking
				personList = newLocalization.get_person_cluster()
				tracker.update_tracking(personList)
				for i in personList:
					print(i.get_value())
				recieving = False
			except:
				if (len(d) != BUFFERSIZE):
					data = ""
				pass

##################################### GUI ######################################################
def comparePerson(prevPerson, newPerson):

	prevPersonData = prevPerson.get_value()
	prevX = prevPersonData[0]
	prevY = prevPersonData[1]
	prevWidth = prevPersonData[2]
	prevLength = prevPersonData[3]
	prevHeight = prevPersonData[4]

	currX = newPerson[0]
	currY = newPerson[1]
	currWidth = newPerson[2]
	currLength = newPerson[3]
	currHeight = newPerson[4]

	if (math.sqrt((prevX - currX) ** 2 + (prevY - currY) ** 2) > TRACKING_DISTANCE_THREHOLD):
		return 0

	if (abs(prevHeight - currHeight) > TRACKING_HEIGHT_THREHOLD):
		return 0

	return 1

	
# Class for storing GUI messages for each person object
class Person:
	def __init__(self, id, x, y, width, length, height, dirX, dirY):
		self.id = id
		self.x = x
		self.y = y
		self.width = width
		self.height = height
		self.length = length
		self.color = (random.uniform(0, 1), random.uniform(0, 1), random.uniform(0, 1))
		self.trackingPoints = []
		self.filled_markers = ('o', 'v', '^', '<', '>', '8', 's', 'p', '*', 'h', 'H', 'D', 'd', 'P', 'X')
		self.m = self.filled_markers[np.random.randint(0, 14)]
		self.dirX = dirX
		self.dirY = dirY

	def get_id(self):
		return self.id

	def get_trackingLineCount(self):
		return len(self.trackingPoints)

	def set_values(self, x, y, width, length, height, dirX = 1, dirY = 1):
		self.x = x
		self.y = y
		self.width = width
		self.length = length
		self.height = height
		self.dirX = dirX
		self.dirY = dirY

	def get_value(self):
		temp = [self.id, self.x, self.y, self.width, self.length, self.height]
		return temp

	def plot_tracking_point(self):
		p = ax.scatter(self.x, self.y, c = self.color, marker = self.m)
		self.trackingPoints.append(p)


	def clear_tracking_point(self):

		for p in self.trackingPoints:
			p.remove()

	def plot_cube(self):
		
		negX = self.x - (self.length / 2)
		negY = self.y - (self.width / 2)
		posX = self.x + (self.length / 2)
		posY = self.y + (self.width / 2)

		ax.plot([negX, posX], [negY, negY], [0, 0], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([posX, posX], [negY, posY], [0, 0], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([posX, negX], [posY, posY], [0, 0], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([negX, negX], [posY, negY], [0, 0], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([negX, negX], [negY, negY], [0, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([posX, posX], [negY, negY], [0, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([posX, posX], [posY, posY], [0, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([negX, negX], [posY, posY], [0, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([negX, posX], [negY, negY], [self.height, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([posX, posX], [negY, posY], [self.height, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([posX, negX], [posY, posY], [self.height, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.plot([negX, negX], [posY, negY], [self.height, self.height], linewidth = 1, label = 'cube', c = self.color)
		ax.text(self.x, self.y, self.height + 0.3, "ID: %d" % (self.id))
		ax.quiver(self.x, self.y, 0, self.dirX, self.dirY, 0, length=(math.sqrt(self.dirX ** 2 + self.dirY ** 2) * 6), normalize=True, label='dir')

def clear_screen():
	ax.lines.clear()
	ax.texts.clear()
	for collect in ax.collections:
		if collect.get_label() == 'dir':
			ax.collections.remove(collect)

def remove_person(selectedPerson, length):
	for i in range(length - 1, -1, -1):
		
		if i not in selectedPerson:
			print ("removed: %d" % i)
			persons[i].clear_tracking_point()
			del persons[i]


###############################################################################################
def animate(i):

	global receive_data
	global prevData
	global persons
	global personList

	clear_screen()
	
	selectedPerson = []

	print("Animate")

	# remove person disappeared in this loop
	for cluster in personList:
		data = cluster.get_value()
		i = 0
		for person in persons:
			if (person.get_id() == data[7]):
				selectedPerson.append(i)
				break; 
			i = i + 1

	remove_person(selectedPerson, len(persons))

	# update person details and add new persons
	for cluster in personList:
		data = cluster.get_value()

		updateFlag = 0
		for person in persons:
			if (person.get_id() == data[7]):
				updateFlag = 1
				person.set_values(data[0], data[1], data[2], data[3], 
					data[4], data[5], data[6])
				break; 

		if updateFlag == 0:
			person = Person(data[7], data[0], data[1], data[2], 
				data[3], data[4], data[5], data[6])
			persons.append(person)


	# plot
	for person in persons:
		print("person")
		print(person.get_value())
		person.plot_cube()
		person.plot_tracking_point()

	receive_data = []


recThreadRunning = True
recThread = threading.Thread(target = receiveData);
recThread.start();

ani = animation.FuncAnimation(fig, animate, interval = 1000)
plt.show()
